[ 00. Laravel 소개 ]
laravel은 php 기반의 웹 애플리케이션 프레임워크
1. ORM을 제공
: 객체와 데이터베이스의 테이블을 매핑
-> 내부적으로 sql을 생성하고 실행하므로 개발자가 직접 sql 쿼리를 작성하지 않아도 됌

2. 블레이드 템플릿 엔진 제공
: 라라벨에서 기본적으로 제공하는 템플릿 엔진
-> PHP와 HTML을 혼합해서 동적인 웹 페이지를 생성하는데 사용됌
-> 그래서 .php 대신 .blade.php 로 작업함

3. 마이그레이션
: 데이터베이스 구조를 정의하고 버전 관리할 수 있도록 제공하는 기능
-> SQL 쿼리 대신 PHP 코드를 사용해 테이블을 정의하고 수정할 수 있음
-> 이를 통해 데이터베이스 변경사항을 추적하고, 팀원 간에 쉽게 공유 가능

- 마이그레이션 파일은 database/migrations 디렉토리에 저장
- 마이그레이션 파일은 두 가지 주요 메서드를 포함
- up() : 데이터베이스에 테이블이나 필드를 생성, 추가하거나 구조를 변경하는 작업을 정의
- down() : up() 메서드에서 수행된 작업을 되돌리는 작업을 정의

4. composer
: php에서 사용되는 의존성 관리 도구
-> PHP 프로젝트에서 필요한 라이브러리나 패키지를 설치하고 관리하는데 사용

- composer.json : 프로젝트의 의존성을 정의하는 파일 => 설치할 패키지의 이름, 버전, 기타 옵션을 명시
- composer.lock : 설치된 패키지의 정확한 버전과 의존성을 기록한 파일
- vendor 디렉토리 : 설치된 패키지와 라이브러리가 저장되는 디렉토리

[ 01. 개발 환경 준비 ]
Laravel sail이 Docker 컨테이너를 기반으로 실행되기 때문에 Docker Desktop을 설치
-> 모든 개발자가 동일한 환경에서 개발하는 것이 가능
Windows에서 Linux 환경을 사용할 수 있게 해주는 wsl 설치
php 패키지 관리자인 composer 설치
docker 컨테이너를 쉽게 설정하고 실행할 수 있도록 해주는 sail 설치

[ 02. 설정 ] 
.env - 데이터베이스와 API키와 같이 환경에 따라 달라질 수 있는 설정값을 저장하는 파일
config - 애플리케이션 전역 설정을 관리하는 디렉토리
- 보통 .env 파일 값은 config 설정 파일에서 사용된다.
- config의 설정값은 config() 헬퍼 함수를 통해 접근 가능(파일명.키 형식)

[ 03. Request Lifecycle ]
Request Lifecycle은 클라이언트 요청이 처리되는 과정을 의미
모든 요청은 public/index.php 로 진입하고, 이 요청은 HTTP 커널(app/Http/Kernel.php)로 전달되어 미들웨어를 거친 후 라우터에서 URL과 매핑된 로직을 실행
컨트롤러는 데이터를 준비하고, 뷰를 통해 HTML 응답을 생성하고 클라이언트에 반환

- 미들웨어 :  HTTP 요청과 응답의 중간에 위치하여 요청을 필터링하는 소프트웨어 계층

[ 04. 스타터킷 브리즈 설치 ] 
인증 기능을 제공하는 패키지인 Breeze 설치 후 프론트엔드 빌드를 위한 npm 설치
마이그레이션을 통해 인증관련 데이터베이스 테이블 생성

[ 05. 글쓰기 화면 만들기 ]
Blade는 Laravel에서 제공하는 PHP 템플릿 엔진
-> HTML과 PHP를 결합해서 동적인 웹 페이지 작성 가능
-> Blade 템플릿은 resources/views 디렉토리에 저장
- routes/web.php 에서 경로와 뷰 파일을 연결함

[ 06. 자바스크립트와 CSS 불러오기 ]
- Laravel의 보안 구조상, resources 디렉토리는 외부에서 접근 불가능하므로 
CSS와 JS파일을 public 디렉토리로 옮겨야 함
-> 이를 해결하기 위해 vite를 사용하여 자산 파일을 빌드하고 public/build 디렉토리에 배포

- npm run dev 명령어 -> vite 실행, 변경사항이 즉시 반영됌
- npm run build 명령어 -> 최적화된 파일을 public/build 디렉토리에 생성

[ 07. TailwindCSS로 꾸미기 ]
Laravel에는 기본적으로 TailwindCSS가 포함됨. 
resources/css/app.css 파일에서 설정할 수 있고, HTML 요소에 TailwindCSS 유틸리티 요소를 추가해서 스타일을 정의할 수 있다.

[ 08. 글 저장하기 / 라우트 추가하기 (feat.CSRF) ]
Laravel에서는 CSRF 공격을 방지하기 위해 CSRF 토큰을 자동으로 생성하고 검증하는 메커니즘 제공
-> 각 세션에 고유한 비밀 키를 생성하고, 요청 시 이 토큰을 비교하여 유효성 검증
-> POST, PUT, PATCH, DELETE

[ 09. 유효성 검사 ]
Laravel의 Request 객체와 validate 메서드를 통해서 유효성 검사를 쉽게 할 수 있음
- 요청 데이터를 Request 객체로 받아서 처리하고, validate 메서드를 사용해서 유효성 검사 수행
- 검증 실패시 자동으로 이전페이지로 리다이렉트, 오류메세지 제공

[ 10. 에러 메시지 표시하기 ]
유효성 검사에 실패하면, 에러 메시지를 세션에 저장
-> 다양한 방식으로 에러 메시지를 출력할 수 있음
-> all() / any() / first() / get() 

- 특정 필드에 대해 에러 메시지를 간단히 출력할 수 있는 Blade 템플릿 지시어인 @error와 @enderror
-> 필드에 에러가 있을 경우 자동으로 $message 변수로 해당 에러 메시지를 제공

[ 11. 한글화하기 ] 
애플리케이션의 언어를 한글로 변경하는 방법은 두가지
1) 기본 언어 파일을 프로젝트로 가져온 다음에 직접 수정하기
2) Laravel-lang 패키지를 설치하고 원하는 언어를 추가

[ 12. 폼 다시 채우기 ]
old input을 사용하여 유효성 검사 실패 후 이전 입력값을 자동으로 유지할 수 있다.

[ 13. 마이그레이션 ]
마이그레이션은 데이터베이스 스키마 변경 사항을 코드로 관리할 수 있도록 도와주는 도구
먼저 마이그레이션 파일을 생성한다.
-> 이 때, 생성된 파일은 database/migrations 디렉터리에 저장됨
-> 파일은 up과 down 메소드로 구성
-> up은 실행시 적용되는 작업, down은 롤백시 적용되는 작업

[ 14. 글 저장하기 (ORM) ]
Laravel에서는 데이터를 관리하기 위해 세가지 방법을 제공
1) PDO
: PDO 객체를 사용하여 sql 쿼리를 직접 작성하고 실행

2) Query Builder
: sql 쿼리를 직접 작성할 필요 X

3) Eloquent ORM
: 객체지향방식으로 데이터베이스와 상호작용하며, 모델을 통해 데이터 처리
- 관계형 데이터를 쉽게 관리할 수 있으므로 Eloquent를 사용하면 좋음

[ 15. 대량 할당 ]
대량할당은 Eloquent 모델에서 한 번에 여러 필드의 값을 할당하는 방법을 말함
-> 만약 의도하지 않은 데이터가 포함될 경우, 컬럼이 조작될 수 있는 보안 문제가 발생함

- Laravel은 대량 할당 시 허용된 필드만 수정 가능하도록 보호하는 기능을 제공함
-> $fillable을 통해 허용된 필드를 지정하거나 $guarded를 통해 허용되지 않는 필드를 지정

[ 16. 글 목록 보여주기 ]
Route를 사용해서 클라이언트 요청과 해당 요청을 처리할 뷰를 연결
- 글 목록을 보여주는 라우트는 GET 요청을 사용
- 데이터를 뷰에 전달하는 방법은 데이터 배열을 전달하거나 with()메서드를 사용하는 방법이 있음
- foreach문을 통해 글 목록 표시

[ 17. 블레이드 기초 ]
블레이드는 코드 중복을 줄이고, XXS 공격을 방지함
- {{ }} 로 스크립트 실행을 방지함
- @auth 디렉티브로 로그인한 사용자에게만 특정 내용을 보여줄 수 있음
-> 반대로, @guest 도 있음
- @foreach 루프에서는 $loop 변수 사용 가능
-> first는 현재 반복이 첫 번째인지 여부
-> index는 현재 반복의 인덱스(0부터 시작)
-> count는 전체 반복 횟수

[ 18. 글 정렬하기 ]
orderBy를 통해 특정 컬럼과 정렬 방향을 지정하여 데이터를 정렬할 수 있음

[ 19. 페이지네이션 ]
1) PHP
- take와 limit을 통해 쿼리 결과의 최대 개수를 반환할 수 있음
- skip과 offset을 통해 특정 개수의 데이터를 건너뛸 수 있음
- 페이지 링크를 수동으로 생성해야 함

2) Laravel에서는 paginate() 메서드로 데이터를 페이지 단위로 나눌 수 있고, 기본 페이지네이션 링크를 자동으로 생성할 수 있음

[ 20. 사람이 보기 좋은 시간 데이터로 변경하기 ]
carbon은 Laravel에서 사용하는 날짜 및 시간 라이브러리
- format() 메서드를 사용해 특정 형식으로 날짜를 출력할 수 있음
- diffForHumans() 메서드를 사용해 시간 간격을 표현할 수 있음

[ 21. 작성자 이름 표시하기 (feat. ORM관계) ]
데이터베이스에서 외래키를 사용해 테이블 간의 관계를 설정하듯, Eloquent에서도 관계를 정의하여 간편하게 연관 데이터를 조회할 수 있음.
1) One to Many에서는 hasMany와 belongsTo
2) One to One에서는 hasOne과 belongsTo
3) Many to Many에서는 두 모델 모두 belongsToMany

[ 22. 데이터 조회 횟수 줄이기 ]
n+1문제는 하나의 메인 쿼리로 n개의 데이터를 가져온 후에 각 데이터와 관련된 데이터를 가져오기 위해 n번의 쿼리를 실행하는 상황을 말함
- 불필요한 쿼리가 반복 실행되어 성능 저하를 유발함
- 기본적으로 Eloquent는 관계 데이터를 필요로 하는 순간에 쿼리를 실행하여 가져오는 Lazy Loading 방식을 사용함
-> 이를 해결하기 위해 관계 데이터를 미리 로드하여 한 번의 쿼리로 필요한 데이터를 모두 가져오는 Eager Loading 방식 사용
-> 첫번째 방법 with() : 데이터를 조인하여 한번의 쿼리로 가져옴
-> 두번째 방법 load() : 데이터를 가져온 후, load 메서드를 사용하여 별도의 쿼리로 관계 데이터를 가져옴

- 실행되는 쿼리를 보기위해 Laravel Telescope 설치 
-> Laravel Telescope는 애플리케이션에서 실행되는 쿼리, 요청 등을 모니터링할 수 있는 개발 도구

